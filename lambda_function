import boto3
from datetime import datetime
import hashlib


def lambda_handler(event, context):
    try:
        db_connection = boto3.resource('dynamodb')  # Creating Db connection wtih table
        table = db_connection.Table('users_data')
        db_response = table.scan()
        items = db_response.get('Items',{})      # Extract items from the response
        cached_data = { item['email'] : item['password'] for item in items }       # cached emails from db
        
        def user_register(user_email,user_password):  
            if user_email in cached_data:
                return {
                    "statusCode": 200,
                    "message": "Email already registered, please Login!", "success": "true"
                }
           
            else:                                           # Register that email in the Db
                hash_password = hashlib.sha256(user_password.encode('utf-8')).hexdigest()  

                user_input_data = {                         # Creating input object for Db
                    "userId": 2,                            # incremental query
                    "email": user_email,
                    "password": hash_password,
                    "createdAt": datetime.now().isoformat()
                }
                
                table.put_item(Item = user_input_data)      # Inserting into Db
                return {
                    "statusCode": 200,
                    "message": "Email registered successfully, please Login!","user_data":user_input_data, "success": "true"
                }

        def user_login(user_email,user_password):
            if user_email in cached_data and verify_password(user_password, cached_data[user_email]):
                return {
                        "statusCode": 200,
                        "message": "User Logged In successfully !","success": "true"
                    }
            
            else:
                return {
                        "statusCode": 400,
                        "message": "User credential don't match  check email and password again ! ","success": "true"
                    }
            
            ### another case when someones try to login directly --> return should register first.


        def verify_password(entered_password, stored_hashed_password):
            entered_password_hashed = hashlib.sha256(entered_password.encode('utf-8')).hexdigest()
            return entered_password_hashed == stored_hashed_password   #bcrypt 
        
        user_email = event['user_email']
        user_password = event['user_password']
        process = event['process'] # register/login
        
        if user_email is None or user_password is None:
            return {
                "statusCode": 400,
                "message": "Email or Password is empty!", "success": "false"
            }
        
        secret_key = "nobody's gonna know"                       # Secret-key for tokenization
        
        if process == "register":
            response = user_register(user_email,user_password)
            return {
                    "statusCode": 200,
                    "body": response
                }
        elif process == "login":
            response = user_login(user_email,user_password)
            return {
                    "statusCode": 200,
                    "body": response
                }
        
    except Exception as e:
        return {
            "error" : str(e),
            "statusCode": 200
        }
            
    
    
    
    
